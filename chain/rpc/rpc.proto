// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package rpc;


// The greeting service definition.
service Greeter {
  // Get account information
  rpc GetAccount(AddressReq)returns (Response) {}
  // Send a signed message
  rpc SendMessageRaw(SendMessageCodeReq)returns (Response) {}
  // Query message
  rpc GetMessage(HashReq)returns (Response) {}
  // Query block using hash
  rpc GetBlockHash(HashReq)returns (Response) {}
  // Query block using height
  rpc GetBlockHeight(HeightReq)returns (Response) {}
  // The final height
  rpc LastHeight(NullReq)returns (Response) {}
  // Confirmed height
  rpc Confirmed(NullReq)returns (Response) {}
  // Get message pool information
  rpc GetMsgPool(NullReq)returns (Response) {}
  rpc GetCycleSupers(CycleReq)returns (Response) {}
  // Get reward information
  rpc GetSupersReward(CycleReq)returns (Response) {}
  // Get token information
  rpc Token(TokenAddressReq)returns (Response) {}
  // Get peer information
  rpc PeersInfo(NullReq)returns (Response) {}
  // Get local node information
  rpc LocalInfo(NullReq)returns (Response) {}
  // To generate address
  rpc GenerateAddress(GenerateReq)returns (Response) {}
  // To generate token address
  rpc GenerateTokenAddress(GenerateTokenReq)returns (Response) {}
  // Create a transaction
  rpc CreateTransaction(TransactionReq)returns (Response) {}
  // Create a token
  rpc CreateToken(TokenReq)returns (Response) {}
  rpc SendTransaction(TransactionReq)returns (Response) {}
  // Send a Token
  rpc SendToken(TokenReq)returns (Response) {}
}

// null req
message NullReq {
}

message AddressReq {
  // address
  string address = 1;
}

message TokenAddressReq {
  // token address
  string token = 1;
}

message SendMessageCodeReq{
  // message data
  bytes code = 1;
}

message HashReq{
  // hash
  string hash = 1;
}

message HeightReq{
  // height
  uint64 height = 1;
}

message CycleReq{
  // cycle
  uint64 cycle = 1;
}

message GenerateReq{
  // mainnet or testnet
  string network = 1;
  // public key
  string publickey = 2;
}

message GenerateTokenReq{
  // mainnet or testnet
  string network = 1;
  // address
  string address = 2;
  // token symbol
  string abbr = 3;
}

message TransactionReq{
  // transfer from
  string from = 1;
  // transfer to
  string to = 2;
  // transfer token
  string token = 3;
  // transfer note
  string note = 4;
  // transfer amount
  uint64 amount = 5;
  // transfer fees
  uint64 fees = 6;
  // transfer time
  uint64 timestamp = 7;
  // transfer nonce
  uint64 nonce = 8;
  // signature
  string signature = 9;
  // public key
  string publickey = 10;
}

message TokenReq{
  // token from
  string from = 1;
  // token receiver
  string receiver = 2;
  // token address
  string token = 4;
  // token name
  string name = 5;
  // token symbol
  string abbr = 6;
  // false
  bool increase = 7;
  // token amount
  uint64 amount = 8;
  // fees
  uint64 fees = 9;
  // time
  uint64 timestamp = 10;
  // nonce
  uint64 nonce = 11;
  // signature
  string signature = 12;
  // public key
  string publickey = 13;
}


// The response message containing the greetings
message Response {
  int32 code = 1;
  bytes result = 2;
  string err = 3;
}
